/* 
Pizza Sales Dashboard

Skills Used: SELECT, SUM, AVG, COUNT, WHERE, YEAR, MONTH, DATENAME, DATEPART, GROUP BY, ORDER BY, WITH, JOIN, OVER, CAST.
*/

SELECT 
  * 
FROM 
  pizza_sales;

-- Selecting all the data from the pizza_sales table. This query retrieves every column and row from the dataset, 
-- allowing for a full examination of all available information related to pizza sales. --

SELECT 
  SUM(total_price) AS Total_Revenue 
FROM 
  pizza_sales;

-- Calculating the total revenue generated from all sales. This query sums up the total_price for each transaction 
-- to determine the overall revenue earned by the pizza business across the dataset. --

SELECT 
  SUM(total_price) / COUNT(DISTINCT order_id) AS Average_Order_Value 
FROM 
  pizza_sales;

-- Determining the average revenue generated per order. By dividing the total revenue (SUM of total_price) 
-- by the total number of unique orders (COUNT of distinct order_id), this query provides insight into the 
-- average monetary value of each customer's order. --

SELECT 
  SUM(quantity) AS Total_Pizzas_Sold 
FROM 
  pizza_sales;

-- Calculating the total number of pizzas sold. This query sums the quantity of pizzas ordered across all transactions, 
-- offering a comprehensive view of the total sales volume in terms of individual pizzas. --

SELECT 
  COUNT(DISTINCT order_id) AS Total_Orders 
FROM 
  pizza_sales;

-- Counting the total number of unique orders. This query provides the total number of individual orders processed, 
-- helping to assess the overall customer activity and order frequency in the dataset. --

SELECT 
  CAST(
    CAST(
      SUM(quantity) AS DECIMAL (10, 2)
    ) / CAST(
      COUNT(DISTINCT order_id) AS DECIMAL (10, 2)
    ) AS DECIMAL(10, 2)
  ) AS Average_Pizzas_Per_Order 
FROM 
  pizza_sales 

-- Calculating the average number of pizzas per order. By dividing the total number of pizzas sold by the total 
-- number of orders, this query reveals the typical quantity of pizzas that customers order in a single transaction. --

SELECT 
  DISTINCT(
    YEAR(order_date)
  ) AS Year 
FROM 
  pizza_sales 

-- Extracting the distinct years from the order dates. This query identifies the range of years covered in the dataset, 
-- helping to establish the temporal scope of the sales data, including the earliest and latest years of recorded orders. --

SELECT 
  DATENAME(DW, order_date) AS Week_Day, 
  DATEPART(W, order_date) AS Week_Number, 
  COUNT(DISTINCT order_id) AS Total_Orders 
FROM 
  pizza_sales 
GROUP BY 
  DATENAME(DW, order_date), 
  DATEPART(W, order_date) 
ORDER BY 
  DATEPART(W, order_date) 

-- Analyzing total orders by the day of the week. This query groups the data by both the name of the day (e.g., Monday, Tuesday) 
-- and the week number within the year, then counts the distinct orders for each day. This provides insights into 
-- ordering patterns, showing which days of the week are most popular for placing orders. --

SELECT 
  DATENAME(MONTH, order_date) AS Month_Name, 
  MONTH(order_date) AS Month_Number, 
  COUNT(DISTINCT order_id) AS Total_Orders 
FROM 
  pizza_sales 
GROUP BY 
  DATENAME(MONTH, order_date), 
  MONTH(order_date) 
ORDER BY 
  Month_Number 

-- Analyzing total orders by month. This query groups the data by both the name of the month and the month number, 
-- and then counts the distinct orders for each month. The result shows the distribution of orders throughout 
-- the year, identifying peak months for sales. --

SELECT 
  pizza_category, 
  CAST(
    SUM(total_price) AS DECIMAL (10, 2)
  ) AS Total_Revenue, 
  CAST(
    SUM(total_price) * 100 / (
      SELECT 
        SUM(total_price) 
      FROM 
        pizza_sales
    ) AS DECIMAL (10, 2)
  ) AS PCT_Sales 
FROM 
  pizza_sales 
GROUP BY 
  pizza_category 
ORDER BY 
  SUM(total_price) DESC 

-- Determining the total revenue and percentage of total sales by pizza category. This query calculates the revenue 
-- generated by each pizza category (e.g., vegetarian, meat lovers) and computes its percentage of the overall sales revenue, 
-- sorted from the highest to lowest revenue categories. This helps to identify which pizza types are the most lucrative. --

SELECT 
  pizza_size, 
  CAST(
    SUM(total_price) AS DECIMAL (10, 2)
  ) AS Total_Revenue, 
  CAST(
    SUM(total_price) * 100 / (
      SELECT 
        SUM(total_price) 
      FROM 
        pizza_sales
    ) AS DECIMAL (10, 2)
  ) AS PCT_Sales 
FROM 
  pizza_sales 
GROUP BY 
  pizza_size 
ORDER BY 
  SUM(total_price) DESC 
  
-- Determining the total revenue and percentage of total sales by pizza size. This query calculates the revenue 
-- generated by each pizza size (e.g., small, medium, large) and computes its percentage of the overall sales revenue, 
-- sorted from the highest to lowest revenue-generating sizes. This helps to identify the most popular and profitable pizza sizes. --

SELECT 
  TOP 5 pizza_name, 
  SUM(total_price) AS Total_Revenue 
FROM 
  pizza_sales 
GROUP BY 
  pizza_name 
ORDER BY 
  SUM(total_price) DESC 

-- Identifying the top 5 pizzas by revenue. This query ranks pizzas based on the total revenue they generated, 
-- selecting the top 5 highest-earning pizza varieties. This analysis helps to pinpoint the most financially successful pizzas. --

SELECT 
  TOP 5 pizza_name, 
  SUM(quantity) AS Total_Pizza_Sold 
FROM 
  pizza_sales 
GROUP BY 
  pizza_name 
ORDER BY 
  SUM(quantity) DESC 
  
-- Identifying the top 5 pizzas by quantity sold. This query ranks pizzas based on the total number of units sold, 
-- selecting the top 5 most popular pizza varieties in terms of volume. This analysis reveals customer preferences 
-- based on the number of pizzas ordered. --

SELECT 
  TOP 5 pizza_name, 
  COUNT(DISTINCT order_id) AS Total_Orders 
FROM 
  pizza_sales 
GROUP BY 
  pizza_name 
ORDER BY 
  COUNT(DISTINCT order_id) DESC 

-- Identifying the top 5 pizzas by total orders. This query ranks pizzas based on the number of unique orders in which 
-- they were included, selecting the top 5 most frequently ordered pizzas. This analysis helps to understand which pizzas 
-- are most commonly chosen by customers. --

SELECT 
  TOP 5 pizza_name, 
  SUM(total_price) AS Total_Revenue 
FROM 
  pizza_sales 
GROUP BY 
  pizza_name 
ORDER BY 
  SUM(total_price) ASC 
  
-- Identifying the bottom 5 pizzas by revenue. This query ranks pizzas based on the total revenue they generated, 
-- selecting the 5 lowest-earning pizza varieties. This analysis helps to identify the least successful pizzas in financial terms. --

SELECT 
  TOP 5 pizza_name, 
  SUM(quantity) AS Total_Pizza_Sold 
FROM 
  pizza_sales 
GROUP BY 
  pizza_name 
ORDER BY 
  SUM(quantity) ASC 

-- Identifying the bottom 5 pizzas by quantity sold. This query ranks pizzas based on the total number of units sold, 
-- selecting the 5 least popular pizza varieties in terms of volume. This analysis highlights pizzas that may not 
-- be resonating with customers based on sales numbers. --

SELECT 
  TOP 5 pizza_name, 
  COUNT(DISTINCT order_id) AS Total_Orders 
FROM 
  pizza_sales 
GROUP BY 
  pizza_name 
ORDER BY 
  COUNT(DISTINCT order_id) ASC 

-- Identifying the bottom 5 pizzas by total orders. This query ranks pizzas based on the number of unique orders 
-- in which they were included, selecting the 5 least frequently ordered pizzas. This analysis sheds light on 
-- pizzas that are less favored by customers. --
